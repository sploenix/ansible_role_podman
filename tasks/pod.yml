---
# code: language=ansible
- name: "Load vars for pod {{ pname }}"
  ansible.builtin.include_vars: "{{ pod_yml_path }}/{{ pname }}.yml"

- name: "Stat data directory of pod {{ pname }}"
  ansible.builtin.stat:
    path: "{{ pod.data_basedir | d(data_basedir) }}/{{ pname }}"
  register: image_dir_stats

- name: "Create data directory for pod {{ pname }}"
  when: not image_dir_stats.stat.exists | d(false)
  block:
    - name: "Create data directory for pod {{ pname }}"
      when: pod.zfs is not defined
      become: true
      ansible.builtin.file:
        path: "{{ pod.data_basedir | d(data_basedir) }}/{{ pname }}"
        state: directory

    - name: "Create ZFS dataset for pod {{ pname }}"
      when: pod.zfs is defined
      vars:
        zfs:
          datasets: >
            { '{{ pname }}':
            { 'name': '{{ pod.zfs.pool }}/{{ pname }}', 'state': 'present' } }
      ansible.builtin.include_role:
        name: "{{ __fqcn_zfs__ }}"

- name: "Create networks for pod {{ pname }}"
  vars:
    use_pod: "{{ pname }}"
  ansible.builtin.include_tasks: network.yml
  loop: "{{ pod.networks | d([]) }}"
  loop_control:
    loop_var: podnet

# wrapper around containers.podman.podman_pod
- name: "Create pod {{ pname }}"
  become: true
  vars:
    infra: "{{ true if (pod.share is defined and pod.share) else false }}"
  containers.podman.podman_pod:
    add_host: "{{ pod.add_host | d(omit) }}"
    blkio_weight: "{{ pod.blkio_weight | d(omit) }}"
    blkio_weight_device: "{{ pod.blkio_weight_device | d(omit) }}"
    cgroup_parent: "{{ pod.cgroup_parent | d(omit) }}"
    cpu_shares: "{{ pod.cpu_shares | d(omit) }}"
    cpus: "{{ pod.cpus | d(omit) }}"
    cpuset_cpus: "{{ pod.cpuset_cpus | d(omit) }}"
    cpuset_mems: "{{ pod.cpuset_mems | d(omit) }}"
    debug: "{{ pod.debug | d(omit) }}"
    device: "{{ pod.device | d(omit) }}"
    device_read_bps: "{{ pod.device_read_bps | d(omit) }}"
    device_write_bps: "{{ pod.device_write_bps | d(omit) }}"
    dns: "{{ pod.dns | d(omit) }}"
    dns_opt: "{{ pod.dns_opt | d(omit) }}"
    dns_search: "{{ pod.dns_search | d(omit) }}"
    executable: "{{ pod.executable | d(omit) }}"
    gidmap: "{{ pod.gidmap | d(omit) }}"
    hostname: "{{ pod.hostname | d(pname) }}"
    infra: "{{ true if infra else false }}"
    infra_command: "{{ pod.infra_command | d(omit) if infra else omit }}"
    infra_common_pidfile: "{{ pod.infra_common_pidfile | d(omit) if infra else omit }}"
    infra_image: "{{ pod.infra_image | d(omit) if infra else omit }}"
    infra_name: "{{ pod.infra_name | d(pname + '_infra') if infra else omit }}"
    ip: "{{ pod.ip | d(omit) }}"
    label: "{{ pod.label | d(omit) }}"
    label_file: "{{ pod.label_file | d(omit) }}"
    mac_address: "{{ pod.mac_address | d(omit) }}"
    memory: "{{ pod.memory | d(omit) }}"
    memory_swap: "{{ pod.memory_swap | d(omit) }}"
    name: "{{ pname }}"
    network: "{{ pod.network | d(omit) }}"
    network_alias: "{{ pod.network_alias | d(omit) }}"
    no_hosts: "{{ pod.no_hosts | d(omit) }}"
    publish: "{{ pod.publish | d(omit) }}"
    recreate: "{{ pod.recreate | d(omit) }}"
    share: "{{ pod.share | d(omit) }}"
    state: "{{ pod.state | d(omit) }}"
    subgidname: "{{ pod.subgidname | d(omit) }}"
    subuidname: "{{ pod.subuidname | d(omit) }}"
    uidmap: "{{ pod.uidmap | d(omit) }}"
    userns: "{{ pod.userns | d(omit) }}"
    volume: "{{ pod.volume | d(omit) }}"
  register: out

- name: "Create containers for pod {{ pname }}"
  when: pod.containers is defined
  vars:
    use_pod: "{{ pname }}"
    basedir: "{{ pod.data_basedir | d(data_basedir) + '/' + pname | d('') }}"
  ansible.builtin.include_tasks: container.yml
  loop: "{{ pod.containers.items() }}"
  loop_control:
    loop_var: container
    label: "{{ container[0] }}"
  tags:
    - pull

- name: "Merge systemd properties for pod {{ pname }} with role defaults"
  ansible.builtin.set_fact:
    pod_systemd: "{{ (pod.generate_systemd | d({})) | combine(podman_systemd_defaults) }}"

- name: "Generate systemd unit file for pod {{ pname }}"
  when: pod_systemd.create_units
  become: true
  containers.podman.podman_generate_systemd:
    name: "{{ pname }}"
    new: "{{ pod_systemd.new }}"
    no_header: true
    dest: "{{ pod_systemd.dest }}"
    requires: "{{ pod_systemd.requires | d(omit) }}"
  notify: "Execute systemd daemon-reload"
  ignore_errors: "{{ ansible_check_mode }}"

- name: "Start and handle autostart for systemd unit for pod {{ pname }}"
  when: pod_systemd.start
        or pod_systemd.enable
  become: true
  ansible.builtin.systemd:
    name: "pod-{{ pname }}"
    state: "{{ 'started' if pod_systemd.start else omit }}"
    enabled: "{{ true if pod_systemd.enable else omit }}"
  ignore_errors: "{{ ansible_check_mode }}"
