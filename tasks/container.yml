---
# code: language=ansible
- name: "Configure podman container instances"
  tags: container
  block:
    - name: "Store container properties of container {{ container[0] }} to variable"
      ansible.builtin.set_fact:
        c: "{{ container[1] }}"
      tags: always

    - name: "Pull image {{ container[1].image }} for container {{ container[0] }}"
      when: c.state is not defined or
            c.state in ['restarted', 'started']
            and not ansible_check_mode
      become: true
      containers.podman.podman_image:
        name: "{{ c.image }}"
        pull: true
      register: image_pull_result
      tags: pull

    - name: "Install file templates for container {{ container[0] }}"
      ansible.builtin.template:
        src: "{{ file.src }}"
        dest: "{{ file.dest | replace('__basedir__', basedir | d('')) | replace('__file__', '') }}"
        mode: "{{ file.mode | d(omit) }}"
        owner: "{{ file.owner | d(omit) }}"
        group: "{{ file.group | d(omit) }}"
      loop: "{{ c.templates | d([]) }}"
      loop_control:
        loop_var: file
        label: "{{ file.dest | d(file) }}"

    - name: "Install inline file templates for container {{ container[0] }}"
      ansible.builtin.copy:
        dest: "{{ file.dest | replace('__basedir__', basedir | d('')) | replace('__file__', '') }}"
        content: "{{ file.content }}"
        mode: "{{ file.mode | d(omit) }}"
        owner: "{{ file.owner | d(omit) }}"
        group: "{{ file.group | d(omit) }}"
      loop: "{{ c.copy_template | d([]) }}"
      loop_control:
        loop_var: file
        label: "{{ file.dest | d(file) }}"

    - name: "Create volumes for container {{ container[0] }}"
      when: "'__file__' not in container_volume and c.volume != []"
      become: true
      ansible.builtin.file:
        path: "{{ (container_volume | split(':'))[0] | replace('__basedir__', basedir | d('')) | replace('__file__', '') }}"
        state: directory
      loop: "{{ c.volume | d([]) | select() }}"
      loop_control:
        loop_var: container_volume
      # this will fail if the volume exists and is not a dir
      # this is ok - error handling will be added later
      ignore_errors: true

    - name: "Update volume strings for container {{ container[0] }}"
      when: c.volume is defined
      vars:
        volumes: >
          [
          {% for v in c.volume | select() %}
          '{{ v | replace("__basedir__", basedir | d("")) | replace('__file__', '') }}',
          {% endfor %}
          ]
      ansible.builtin.set_fact:
        c: "{{ c | combine({'volume': volumes}, recursive=true) }}"

    # wrapper for 
    # https://docs.ansible.com/ansible/latest/collections/containers/podman/podman_container_module.html#ansible-collections-containers-podman-podman-container-module
    - name: "Create container {{ container[0] }}"
      become: true
      containers.podman.podman_container:
        annotation: "{{ c.annotation | d(omit) }}"
        authfile: "{{ c.authfile | d(omit) }}"
        blkio_weight: "{{ c.blkio_weight | d(omit) }}"
        blkio_weight_device: "{{ c.blkio_weight_device | d(omit) }}"
        cap_add: "{{ c.cap_add | d(omit) }}"
        cap_drop: "{{ c.cap_drop | d(omit) }}"
        cgroup_parent: "{{ c.cgroup_parent | d(omit) }}"
        cgroupns: "{{ c.cgroupns | d(omit) }}"
        cgroups: "{{ c.cgroups | d(omit) }}"
        cidfile: "{{ c.cidfile | d(omit) }}"
        cmd_args: "{{ c.cmd_args | d(omit) }}"
        command: "{{ c.command | d(omit) }}"
        conmon_pidfile: "{{ c.conmon_pidfile | d(omit) }}"
        cpu_period: "{{ c.cpu_period | d(omit) }}"
        cpu_quota: "{{ c.cpu_quota | d(omit) }}"
        cpu_rt_period: "{{ c.cpu_rt_period | d(omit) }}"
        cpu_rt_runtime: "{{ c.cpu_rt_runtime | d(omit) }}"
        cpu_shares: "{{ c.cpu_shares | d(omit) }}"
        cpus: "{{ c.cpus | d(omit) }}"
        cpuset_cpus: "{{ c.cpuset_cpus | d(omit) }}"
        cpuset_mems: "{{ c.cpuset_mems | d(omit) }}"
        debug: "{{ c.debug | d(omit) }}"
        detach: "{{ c.detach | d(omit) }}"
        detach_keys: "{{ c.detach_keys | d(omit) }}"
        device: "{{ c.device | d(omit) }}"
        device_read_bps: "{{ c.device_read_bps | d(omit) }}"
        device_read_iops: "{{ c.device_read_iops | d(omit) }}"
        device_write_bps: "{{ c.device_write_bps | d(omit) }}"
        device_write_iops: "{{ c.device_write_iops | d(omit) }}"
        dns: "{{ c.dns | d(omit) }}"
        dns_option: "{{ c.dns_option | d(omit) }}"
        dns_search: "{{ c.dns_search | d(omit) }}"
        entrypoint: "{{ c.entrypoint | d(omit) }}"
        env: "{{ c.env | d(omit) }}"
        env_file: "{{ c.env_file | d(omit) }}"
        env_host: "{{ c.env_host | d(omit) }}"
        etc_hosts: "{{ c.etc_hosts | d(omit) }}"
        executable: "{{ c.executable | d(omit) }}"
        expose: "{{ c.expose | d(omit) }}"
        force_restart: "{{ c.force_restart | d(omit) }}"
        generate_systemd: "{{ c.generate_systemd | d(omit) }}"
        gidmap: "{{ c.gidmap | d(omit) }}"
        group_add: "{{ c.group_add | d(omit) }}"
        healthcheck: "{{ c.healthcheck | d(omit) }}"
        healthcheck_failure_action: "{{ c.healthcheck_failure_action | d(omit) }}"
        healthcheck_interval: "{{ c.healthcheck_interval | d(omit) }}"
        healthcheck_retries: "{{ c.healthcheck_retries | d(omit) }}"
        healthcheck_start_period: "{{ c.healthcheck_start_period | d(omit) }}"
        healthcheck_timeout: "{{ c.healthcheck_timeout | d(omit) }}"
        hooks_dir: "{{ c.hooks_dir | d(omit) }}"
        hostname: "{{ c.hostname | d(container[0]) }}"
        image: "{{ c.image | d(omit) }}"
        image_strict: "{{ c.image_strict | d(omit) }}"
        image_volume: "{{ c.image_volume | d(omit) }}"
        init: "{{ c.init | d(omit) }}"
        init_path: "{{ c.init_path | d(omit) }}"
        interactive: "{{ c.interactive | d(omit) }}"
        ip: "{{ c.ip | d(omit) }}"
        ipc: "{{ c.ipc | d(omit) }}"
        kernel_memory: "{{ c.kernel_memory | d(omit) }}"
        label: "{{ c.label | d(omit) }}"
        label_file: "{{ c.label_file | d(omit) }}"
        log_driver: "{{ c.log_driver | d('journald') }}"
        log_level: "{{ c.log_level | d(omit) }}"
        log_opt: "{{ c.log_opt | d(omit) }}"
        mac_address: "{{ c.mac_address | d(omit) }}"
        memory: "{{ c.memory | d(omit) }}"
        memory_reservation: "{{ c.memory_reservation | d(omit) }}"
        memory_swap: "{{ c.memory_swap | d(omit) }}"
        memory_swappiness: "{{ c.memory_swappiness | d(omit) }}"
        mount: "{{ c.mount | d(omit) }}"
        name: "{{ (use_pod + '_' if use_pod is defined else '') + container[0] }}"
        network: "{{ (c.network | d([]) | select()) | d(omit) }}"
        network_alias: "{{ c.network_alias | d(omit) }}"
        no_hosts: "{{ c.no_hosts | d(omit) }}"
        oom_kill_disable: "{{ c.oom_kill_disable | d(omit) }}"
        oom_score_adj: "{{ c.oom_score_adj | d(omit) }}"
        pid: "{{ c.pid | d(omit) }}"
        pid_file: "{{ c.pid_file | d(omit) }}"
        pids_limit: "{{ c.pids_limit | d(omit) }}"
        pod: "{{ c.pod | d(use_pod) | d(omit) }}"
        #pod_id_file: "{{ c.pod_id_file | d('/run/pod-' + use_pod + '.pod-id') }}"
        privileged: "{{ c.privileged | d(omit) }}"
        publish: "{{ c.publish | d(omit) }}"
        publish_all: "{{ c.publish_all | d(omit) }}"
        read_only: "{{ c.read_only | d(omit) }}"
        read_only_tmpfs: "{{ c.read_only_tmpfs | d(omit) }}"
        recreate: "{{ c.recreate | d(omit) }}"
        requires: "{{ c.requires | d(omit) }}"
        restart_policy: "{{ c.restart_policy | d(omit) }}"
        rm: "{{ c.rm | d(omit) }}"
        rootfs: "{{ c.rootfs | d(omit) }}"
        sdnotify: "{{ c.sdnotify | d(omit) }}"
        secrets: "{{ c.secrets | d(omit) }}"
        security_opt: "{{ c.security_opt | d(omit) }}"
        shm_size: "{{ c.shm_size | d(omit) }}"
        sig_proxy: "{{ c.sig_proxy | d(omit) }}"
        state: "{{ c.state | d('present') }}"
        stop_signal: "{{ c.stop_signal | d(omit) }}"
        stop_timeout: "{{ c.stop_timeout | d(omit) }}"
        subgidname: "{{ c.subgidname | d(omit) }}"
        subuidname: "{{ c.subuidname | d(omit) }}"
        sysctl: "{{ c.sysctl | d(omit) }}"
        systemd: "{{ c.systemd | d(omit) }}"
        timezone: "{{ c.timezone | d(omit) }}"
        tmpfs: "{{ c.tmpfs | d(omit) }}"
        tty: "{{ c.tty | d(omit) }}"
        uidmap: "{{ c.uidmap | d(omit) }}"
        ulimit: "{{ c.ulimit | d(omit) }}"
        user: "{{ c.user | d(omit) }}"
        userns: "{{ c.userns | d(omit) }}"
        uts: "{{ c.uts | d(omit) }}"
        volume: "{{ c.volume | d(omit) }}"
        volumes_from: "{{ c.volumes_from | d(omit) }}"
        workdir: "{{ c.workdir | d(omit) }}"
      register: out

#    - ansible.builtin.debug:
#        var: out
